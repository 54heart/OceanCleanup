<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20201.20.0219.0753                               -->
<workbook original-version='18.1' source-build='2020.1.0 (20201.20.0219.0753)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Sheet1 (State - Total Pounds Collected)' inline='true' name='federated.0mazgwc08p4u7q1e79lg219gt07s' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='State - Total Pounds Collected' name='excel-direct.1iozuou1lcwl9t10dzbjq1201ap6'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/Aishwarya/Documents/GitHub/OceanCleanup/Excel Files -Not Dataset Inclusive/State - Total Pounds Collected.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1iozuou1lcwl9t10dzbjq1201ap6' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:G54:no:A1:G54:0' header='yes' outcome='6'>
            <column datatype='string' name='State' ordinal='0' />
            <column datatype='integer' name='2015' ordinal='1' />
            <column datatype='integer' name='2016' ordinal='2' />
            <column datatype='integer' name='2017' ordinal='3' />
            <column datatype='integer' name='2018' ordinal='4' />
            <column datatype='integer' name='2019' ordinal='5' />
            <column datatype='integer' name='Grand Total' ordinal='6' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RIN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2015</remote-name>
            <remote-type>20</remote-type>
            <local-name>[2015]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>2015</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2016</remote-name>
            <remote-type>20</remote-type>
            <local-name>[2016]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>2016</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2017</remote-name>
            <remote-type>20</remote-type>
            <local-name>[2017]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>2017</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2018</remote-name>
            <remote-type>20</remote-type>
            <local-name>[2018]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>2018</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2019</remote-name>
            <remote-type>20</remote-type>
            <local-name>[2019]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>2019</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Grand Total</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Grand Total]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Grand Total</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:G54:no:A1:G54:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
        <semantic-values semantic-role='[State].[Name]'>
          <semantic-value key='&quot;Alabama, USA&quot;' value='&quot;Alabama&quot;' />
          <semantic-value key='&quot;Alaska, USA&quot;' value='&quot;Alabama&quot;' />
          <semantic-value key='&quot;Arizona, USA&quot;' value='&quot;Arizona&quot;' />
          <semantic-value key='&quot;Arkansas, USA&quot;' value='&quot;Arkansas&quot;' />
          <semantic-value key='&quot;California, USA&quot;' value='&quot;California&quot;' />
          <semantic-value key='&quot;Colorado, USA&quot;' value='&quot;Colorado&quot;' />
          <semantic-value key='&quot;Connecticut, USA&quot;' value='&quot;Connecticut&quot;' />
          <semantic-value key='&quot;Delaware, USA&quot;' value='&quot;Delaware&quot;' />
          <semantic-value key='&quot;District of Columbia, USA&quot;' value='&quot;District of Columbia&quot;' />
          <semantic-value key='&quot;Florida, USA&quot;' value='&quot;Florida&quot;' />
          <semantic-value key='&quot;Georgia, USA&quot;' value='&quot;Georgia&quot;' />
          <semantic-value key='&quot;Hawaii, USA&quot;' value='&quot;Hawaii&quot;' />
          <semantic-value key='&quot;Idaho, USA&quot;' value='&quot;Idaho&quot;' />
          <semantic-value key='&quot;Illinois, USA&quot;' value='&quot;Illinois&quot;' />
          <semantic-value key='&quot;Indiana, USA&quot;' value='&quot;Indiana&quot;' />
          <semantic-value key='&quot;Iowa, USA&quot;' value='&quot;Iowa&quot;' />
          <semantic-value key='&quot;Kansas, USA&quot;' value='&quot;Kansas&quot;' />
          <semantic-value key='&quot;Kentucky, USA&quot;' value='&quot;Kentucky&quot;' />
          <semantic-value key='&quot;Louisiana, USA&quot;' value='&quot;Louisiana&quot;' />
          <semantic-value key='&quot;Maine, USA&quot;' value='&quot;Maine&quot;' />
          <semantic-value key='&quot;Maryland, USA&quot;' value='&quot;Maryland&quot;' />
          <semantic-value key='&quot;Massachusetts, USA&quot;' value='&quot;Massachusetts&quot;' />
          <semantic-value key='&quot;Michigan, USA&quot;' value='&quot;Michigan&quot;' />
          <semantic-value key='&quot;Minnesota, USA&quot;' value='&quot;Minnesota&quot;' />
          <semantic-value key='&quot;Mississippi, USA&quot;' value='&quot;Mississippi&quot;' />
          <semantic-value key='&quot;Missouri, USA&quot;' value='&quot;Missouri&quot;' />
          <semantic-value key='&quot;Montana, USA&quot;' value='&quot;Montana&quot;' />
          <semantic-value key='&quot;Nebraska, USA&quot;' value='&quot;Nebraska&quot;' />
          <semantic-value key='&quot;Nevada, USA&quot;' value='&quot;Nevada&quot;' />
          <semantic-value key='&quot;New Hampshire, USA&quot;' value='&quot;New Hampshire&quot;' />
          <semantic-value key='&quot;New Jersey, USA&quot;' value='&quot;New Jersey&quot;' />
          <semantic-value key='&quot;New Mexico, USA&quot;' value='&quot;New Mexico&quot;' />
          <semantic-value key='&quot;New York, USA&quot;' value='&quot;New York&quot;' />
          <semantic-value key='&quot;North Carolina, USA&quot;' value='&quot;North Carolina&quot;' />
          <semantic-value key='&quot;North Dakota, USA&quot;' value='&quot;North Dakota&quot;' />
          <semantic-value key='&quot;Ohio, USA&quot;' value='&quot;Ohio&quot;' />
          <semantic-value key='&quot;Oklahoma, USA&quot;' value='&quot;Oklahoma&quot;' />
          <semantic-value key='&quot;Oregon, USA&quot;' value='&quot;Oregon&quot;' />
          <semantic-value key='&quot;Pennsylvania, USA&quot;' value='&quot;Pennsylvania&quot;' />
          <semantic-value key='&quot;Rhode Island, USA&quot;' value='&quot;Rhode Island&quot;' />
          <semantic-value key='&quot;South Carolina, USA&quot;' value='&quot;South Carolina&quot;' />
          <semantic-value key='&quot;South Dakota, USA&quot;' value='&quot;South Dakota&quot;' />
          <semantic-value key='&quot;Tennessee, USA&quot;' value='&quot;Tennessee&quot;' />
          <semantic-value key='&quot;Texas, USA&quot;' value='&quot;Texas&quot;' />
          <semantic-value key='&quot;Utah, USA&quot;' value='&quot;Utah&quot;' />
          <semantic-value key='&quot;Vermont, USA&quot;' value='&quot;Vermont&quot;' />
          <semantic-value key='&quot;Virginia, USA&quot;' value='&quot;Virginia&quot;' />
          <semantic-value key='&quot;Washington, USA&quot;' value='&quot;Washington&quot;' />
          <semantic-value key='&quot;West Virginia, USA&quot;' value='&quot;West Virginia&quot;' />
          <semantic-value key='&quot;Wisconsin, USA&quot;' value='&quot;Wisconsin&quot;' />
          <semantic-value key='&quot;Wyoming, USA&quot;' value='&quot;Wyoming&quot;' />
        </semantic-values>
        <semantic-values semantic-role='[Geographical].[Latitude]'>
          <semantic-value key='&quot;Los Angeles, USA&quot;' value='34.052199999999999' />
        </semantic-values>
        <semantic-values semantic-role='[Geographical].[Longitude]'>
          <semantic-value key='&quot;Los Angeles, USA&quot;' value='118.2437' />
        </semantic-values>
      </column>
      <layout dim-ordering='alphabetic' dim-percentage='0.309924' measure-ordering='alphabetic' measure-percentage='0.690076' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='State-Total Pounds Collected'>
      <layout-options>
        <title>
          <formatted-text>
            <run>State-Wise Total Pounds Collected</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (State - Total Pounds Collected)' name='federated.0mazgwc08p4u7q1e79lg219gt07s' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0mazgwc08p4u7q1e79lg219gt07s'>
            <column datatype='integer' name='[Grand Total]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
              <semantic-values semantic-role='[State].[Name]'>
                <semantic-value key='&quot;Alabama, USA&quot;' value='&quot;Alabama&quot;' />
                <semantic-value key='&quot;Alaska, USA&quot;' value='&quot;Alabama&quot;' />
                <semantic-value key='&quot;Arizona, USA&quot;' value='&quot;Arizona&quot;' />
                <semantic-value key='&quot;Arkansas, USA&quot;' value='&quot;Arkansas&quot;' />
                <semantic-value key='&quot;California, USA&quot;' value='&quot;California&quot;' />
                <semantic-value key='&quot;Colorado, USA&quot;' value='&quot;Colorado&quot;' />
                <semantic-value key='&quot;Connecticut, USA&quot;' value='&quot;Connecticut&quot;' />
                <semantic-value key='&quot;Delaware, USA&quot;' value='&quot;Delaware&quot;' />
                <semantic-value key='&quot;District of Columbia, USA&quot;' value='&quot;District of Columbia&quot;' />
                <semantic-value key='&quot;Florida, USA&quot;' value='&quot;Florida&quot;' />
                <semantic-value key='&quot;Georgia, USA&quot;' value='&quot;Georgia&quot;' />
                <semantic-value key='&quot;Hawaii, USA&quot;' value='&quot;Hawaii&quot;' />
                <semantic-value key='&quot;Idaho, USA&quot;' value='&quot;Idaho&quot;' />
                <semantic-value key='&quot;Illinois, USA&quot;' value='&quot;Illinois&quot;' />
                <semantic-value key='&quot;Indiana, USA&quot;' value='&quot;Indiana&quot;' />
                <semantic-value key='&quot;Iowa, USA&quot;' value='&quot;Iowa&quot;' />
                <semantic-value key='&quot;Kansas, USA&quot;' value='&quot;Kansas&quot;' />
                <semantic-value key='&quot;Kentucky, USA&quot;' value='&quot;Kentucky&quot;' />
                <semantic-value key='&quot;Louisiana, USA&quot;' value='&quot;Louisiana&quot;' />
                <semantic-value key='&quot;Maine, USA&quot;' value='&quot;Maine&quot;' />
                <semantic-value key='&quot;Maryland, USA&quot;' value='&quot;Maryland&quot;' />
                <semantic-value key='&quot;Massachusetts, USA&quot;' value='&quot;Massachusetts&quot;' />
                <semantic-value key='&quot;Michigan, USA&quot;' value='&quot;Michigan&quot;' />
                <semantic-value key='&quot;Minnesota, USA&quot;' value='&quot;Minnesota&quot;' />
                <semantic-value key='&quot;Mississippi, USA&quot;' value='&quot;Mississippi&quot;' />
                <semantic-value key='&quot;Missouri, USA&quot;' value='&quot;Missouri&quot;' />
                <semantic-value key='&quot;Montana, USA&quot;' value='&quot;Montana&quot;' />
                <semantic-value key='&quot;Nebraska, USA&quot;' value='&quot;Nebraska&quot;' />
                <semantic-value key='&quot;Nevada, USA&quot;' value='&quot;Nevada&quot;' />
                <semantic-value key='&quot;New Hampshire, USA&quot;' value='&quot;New Hampshire&quot;' />
                <semantic-value key='&quot;New Jersey, USA&quot;' value='&quot;New Jersey&quot;' />
                <semantic-value key='&quot;New Mexico, USA&quot;' value='&quot;New Mexico&quot;' />
                <semantic-value key='&quot;New York, USA&quot;' value='&quot;New York&quot;' />
                <semantic-value key='&quot;North Carolina, USA&quot;' value='&quot;North Carolina&quot;' />
                <semantic-value key='&quot;North Dakota, USA&quot;' value='&quot;North Dakota&quot;' />
                <semantic-value key='&quot;Ohio, USA&quot;' value='&quot;Ohio&quot;' />
                <semantic-value key='&quot;Oklahoma, USA&quot;' value='&quot;Oklahoma&quot;' />
                <semantic-value key='&quot;Oregon, USA&quot;' value='&quot;Oregon&quot;' />
                <semantic-value key='&quot;Pennsylvania, USA&quot;' value='&quot;Pennsylvania&quot;' />
                <semantic-value key='&quot;Rhode Island, USA&quot;' value='&quot;Rhode Island&quot;' />
                <semantic-value key='&quot;South Carolina, USA&quot;' value='&quot;South Carolina&quot;' />
                <semantic-value key='&quot;South Dakota, USA&quot;' value='&quot;South Dakota&quot;' />
                <semantic-value key='&quot;Tennessee, USA&quot;' value='&quot;Tennessee&quot;' />
                <semantic-value key='&quot;Texas, USA&quot;' value='&quot;Texas&quot;' />
                <semantic-value key='&quot;Utah, USA&quot;' value='&quot;Utah&quot;' />
                <semantic-value key='&quot;Vermont, USA&quot;' value='&quot;Vermont&quot;' />
                <semantic-value key='&quot;Virginia, USA&quot;' value='&quot;Virginia&quot;' />
                <semantic-value key='&quot;Washington, USA&quot;' value='&quot;Washington&quot;' />
                <semantic-value key='&quot;West Virginia, USA&quot;' value='&quot;West Virginia&quot;' />
                <semantic-value key='&quot;Wisconsin, USA&quot;' value='&quot;Wisconsin&quot;' />
                <semantic-value key='&quot;Wyoming, USA&quot;' value='&quot;Wyoming&quot;' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Latitude]'>
                <semantic-value key='&quot;Los Angeles, USA&quot;' value='34.052199999999999' />
              </semantic-values>
              <semantic-values semantic-role='[Geographical].[Longitude]'>
                <semantic-value key='&quot;Los Angeles, USA&quot;' value='118.2437' />
              </semantic-values>
            </column>
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Grand Total]' derivation='Sum' name='[sum:Grand Total:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0mazgwc08p4u7q1e79lg219gt07s].[Latitude (generated)]' included-values='non-null' />
          <filter class='quantitative' column='[federated.0mazgwc08p4u7q1e79lg219gt07s].[Longitude (generated)]' included-values='non-null' />
          <slices>
            <column>[federated.0mazgwc08p4u7q1e79lg219gt07s].[Latitude (generated)]</column>
            <column>[federated.0mazgwc08p4u7q1e79lg219gt07s].[Longitude (generated)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0mazgwc08p4u7q1e79lg219gt07s].[Longitude (generated)]' field-type='quantitative' max='25305940.823001429' min='21624184.93014707' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0mazgwc08p4u7q1e79lg219gt07s].[Latitude (generated)]' field-type='quantitative' max='3491140.0771592525' min='1315864.1595166328' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0mazgwc08p4u7q1e79lg219gt07s].[sum:Grand Total:qk]' palette='tableau-map-temperatur' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.0mazgwc08p4u7q1e79lg219gt07s].[none:State:nk]' value='false' />
            <format attr='break-on-special' field='[federated.0mazgwc08p4u7q1e79lg219gt07s].[none:State:nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.0mazgwc08p4u7q1e79lg219gt07s].[none:State:nk]' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0mazgwc08p4u7q1e79lg219gt07s].[sum:Grand Total:qk]' />
              <text column='[federated.0mazgwc08p4u7q1e79lg219gt07s].[none:State:nk]' />
              <text column='[federated.0mazgwc08p4u7q1e79lg219gt07s].[sum:Grand Total:qk]' />
              <lod column='[federated.0mazgwc08p4u7q1e79lg219gt07s].[none:State:nk]' />
              <geometry column='[federated.0mazgwc08p4u7q1e79lg219gt07s].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0mazgwc08p4u7q1e79lg219gt07s].[Latitude (generated)]</rows>
        <cols>[federated.0mazgwc08p4u7q1e79lg219gt07s].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{366C4632-48CF-4A4E-8884-65DA20B13FB0}' />
    </worksheet>
    <worksheet name='Year Wise -Total Pounds Collected'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (State - Total Pounds Collected)' name='federated.0mazgwc08p4u7q1e79lg219gt07s' />
          </datasources>
          <datasource-dependencies datasource='federated.0mazgwc08p4u7q1e79lg219gt07s'>
            <column datatype='integer' name='[2015]' role='measure' type='quantitative' />
            <column datatype='integer' name='[2016]' role='measure' type='quantitative' />
            <column datatype='integer' name='[2017]' role='measure' type='quantitative' />
            <column datatype='integer' name='[2018]' role='measure' type='quantitative' />
            <column datatype='integer' name='[2019]' role='measure' type='quantitative' />
            <column-instance column='[2015]' derivation='Sum' name='[sum:2015:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2016]' derivation='Sum' name='[sum:2016:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2017]' derivation='Sum' name='[sum:2017:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2018]' derivation='Sum' name='[sum:2018:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2019]' derivation='Sum' name='[sum:2019:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0mazgwc08p4u7q1e79lg219gt07s].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0mazgwc08p4u7q1e79lg219gt07s].[sum:2015:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0mazgwc08p4u7q1e79lg219gt07s].[sum:2016:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0mazgwc08p4u7q1e79lg219gt07s].[sum:2017:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0mazgwc08p4u7q1e79lg219gt07s].[sum:2018:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0mazgwc08p4u7q1e79lg219gt07s].[sum:2019:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0mazgwc08p4u7q1e79lg219gt07s].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0mazgwc08p4u7q1e79lg219gt07s].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0mazgwc08p4u7q1e79lg219gt07s].[:Measure Names]</rows>
        <cols />
      </table>
      <simple-id uuid='{38031EC2-7F01-4B65-9A2E-035A084C8EEA}' />
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.5' source-height='44'>
    <window class='worksheet' maximized='true' name='State-Total Pounds Collected'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0mazgwc08p4u7q1e79lg219gt07s].[sum:Grand Total:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0mazgwc08p4u7q1e79lg219gt07s].[none:State:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{94EDC309-81D3-4923-8DAA-341870B2DA74}' />
    </window>
    <window class='worksheet' name='Year Wise -Total Pounds Collected'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{8AD466BC-867D-4EDF-9800-CD5D14F04D2E}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='State-Total Pounds Collected' width='192'>
      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
      YII=
    </thumbnail>
    <thumbnail height='129' name='Year Wise -Total Pounds Collected' width='184'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
